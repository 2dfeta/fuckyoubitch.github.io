// Sidebar toggle functionality
const sidebar = document.getElementById("sidebar");
const toggleBtn = document.getElementById("sidebar-toggle");

toggleBtn.addEventListener("click", () => {
  sidebar.classList.toggle("hidden");
});

// Chat functionality
const chatOutput = document.getElementById("chat-output");
const chatInput = document.getElementById("chat-input");
const sendBtn = document.getElementById("send-btn");

sendBtn.addEventListener("click", sendMessage);
chatInput.addEventListener("keydown", function (e) {
  if (e.key === "Enter" && !e.shiftKey) {
    e.preventDefault();
    sendMessage();
  }
});

async function sendMessage() {
  const userText = chatInput.value.trim();
  if (!userText) return;

  appendMessage(userText, "user");
  chatInput.value = "";

  appendMessage("ƒêang nghƒ©...", "bot", true);

  const loadingMsg = document.querySelector(".bot.loading");
  const aiReply = await callAI(userText);

  if (loadingMsg) {
    loadingMsg.textContent = aiReply;
    loadingMsg.classList.remove("loading");
  }
}

function appendMessage(text, type, loading = false) {
  const msg = document.createElement("div");
  msg.className = `chat-message ${type}` + (loading ? " loading" : "");
  msg.textContent = text;
  chatOutput.appendChild(msg);
  chatOutput.scrollTop = chatOutput.scrollHeight;
}

// === API CONFIG ===
const apiKey = "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"; // üîπ Thay b·∫±ng key th·∫≠t t·ª´ https://openrouter.ai/
const apiUrl = "https://openrouter.ai/api/v1/chat/completions";

async function callAI(userMessage, retryCount = 0) {
  if (!apiKey || apiKey.includes("YOUR_OPENROUTER_KEY")) {
    return "‚ùå B·∫°n ch∆∞a c·∫•u h√¨nh API key. V√†o demo.js ƒë·ªÉ thay key OpenRouter.";
  }

  try {
    const response = await fetch(apiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`,
        "HTTP-Referer": "https://yourwebsite.com", // t√πy ch·ªçn
        "X-Title": "VietDz A.I" // t√πy ch·ªçn
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo", // Ho·∫∑c model free kh√°c
        messages: [
          { role: "system", content: "B·∫°n l√† VietDz A.I, tr·∫£ l·ªùi vui v·∫ª, d·ªÖ hi·ªÉu, n√≥i ƒë√∫ng s·ª± th·∫≠t kh√¥ng n√≥i nh·ªØng ƒëi·ªÅu kh√¥ng ƒë√∫ng s·ª± th·∫≠t, ƒë·∫ßy ƒë·ªß ƒë·ªÉ kh√¥ng g√¢y hi·ªÉu l·∫ßm, c√≥ th·ªÉ tr·∫£ l·ªùi nh·ªØng c√¢u h·ªèi public." },
          { role: "user", content: userMessage }
        ],
        max_tokens: 800
      })
    });

    if (response.status === 429) {
      if (retryCount < 3) {
        console.warn(`B·ªã rate limit, th·ª≠ l·∫°i sau 2 gi√¢y (l·∫ßn ${retryCount + 1})...`);
        await new Promise(r => setTimeout(r, 2000));
        return callAI(userMessage, retryCount + 1);
      }
      throw new Error("B·∫°n g·ªçi API qu√° nhanh ho·∫∑c ƒë√£ h·∫øt l∆∞·ª£t d√πng.");
    }

    if (!response.ok) {
      const errorDetails = await response.json();
      console.error("API Error Details:", errorDetails);
      throw new Error(errorDetails.error?.message || "L·ªói API kh√¥ng x√°c ƒë·ªãnh");
    }

    const data = await response.json();
    const reply = data.choices?.[0]?.message?.content?.trim();
    if (!reply) throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.");
    return reply;

  } catch (error) {
    console.error("Error:", error);
    return `‚ùå L·ªói: ${error.message}`;
  }
}

// New chat functionality
function newChat() {
  chatOutput.innerHTML = "";
}
document.getElementById("new-chat-btn").addEventListener("click", newChat);
